/**
  * v0.3.31 generated on: Thu May 18 2017 01:24:44 GMT+0000 (UTC)
  * Copyright (c) 2014-2017, Ecor Ventures LLC. All Rights Reserved. See LICENSE (BSD3).
  */
'use strict'

require('colors')

const pkg = require('./package.json')
const EventEmitter = require('./lib/EventEmitter')

global.NGN = {}
require('./shared/core')

class NGNCore extends EventEmitter {
  constructor () {
    super()

    Object.defineProperties(this, {
      version: NGN.privateconst(pkg.version),

      _bridgerpc: NGN.private(null),

      _bridge: {
        enumerable: false,
        get: () => {
          return this._bridgerpc
        },
        set: (rpc) => {
          if (rpc instanceof this.RPC.Client) {
            rpc.on('ready', () => {
              this.emit('bridge.ready')

              if (rpc.configuration && typeof rpc.configuration === 'function') {
                rpc.configuration(NGN._meta.system || '', NGN._meta.secret || '', (err, cfg) => {
                  if (err) {
                    throw err
                  }

                  let exists = this._cmdb !== null
                  this._cmdb = cfg || {}
                  this.emit('configuration.' + (exists ? 'change' : 'ready'))
                })
              }
            })

            rpc.once('disconnect', () => {
              this.emit('bridge.disconnect')
              this._bridge = null
            })

            this._bridgerpc = rpc
          } else {
            this._bridgerpc = null
          }
        }
      },

      _cmdb: NGN.private(null),

      _meta: NGN.private({
        system: process.env.NGN_SYSTEM_ID || null,
        secret: process.env.NGN_SYSTEM_SECRET || null,
        name: process.env.NGN_SERVICE_NAME || process.title !== 'node' ? process.title : 'Unknown',
        bridge: process.env.NGN_BRIDGE || 'localhost:5555'
      }),

      setup: NGN.const(function (settings) {
        this._meta.system = settings.system || this._meta.system
        this._meta.secret = settings.secret || this._meta.secret
        this._meta.name = settings.name || this._meta.name
        this._meta.bridge = settings.bridge || this._meta.bridge
        this.emit('setup.complete')
      })
    })

    this.on('newListener', () => {
      this.setMaxListeners(this.getMaxListeners() + 1)
    })

    this.on('removeListener', () => {
      this.setMaxListeners(this.getMaxListeners() - 1)
    })
  }

  get BRIDGE () {
    return this._bridge
  }

  get config () {
    return this._cmdb || {}
  }
}

NGN.extend('EventEmitter', NGN.privateconst(EventEmitter))
require('./shared/eventemitter')

const Log = require('./lib/Log')
const Tunnel = require('./lib/Tunnel')
const Utility = require('./lib/Utility')

const CustomException = require('./shared/exception')
NGN.extend('createException', NGN.privateconst(function (config) {
  config = config || {}
  config = typeof config === 'string' ? { message: config } : config
  config.name = config.name || 'NgnError'
  config.name = config.name.replace(/[^a-zA-Z0-9_]/gi, '')

  global[config.name] = function () {
    if (arguments.length > 0) {
      config.message = arguments[0]
    }
    return new CustomException(config)
  }
}))

NGN.extend('_log', NGN.private(null))
NGN.extend('Log', NGN.get(function () {
  if (this._log === null) {
    this._log = new Log()
  }

  return this._log
}))
NGN.extend('Tunnel', NGN.const(Tunnel))
NGN.extend('Server', NGN.const(require('./lib/Server')))
NGN.extend('BUS', NGN.const(require('./lib/BUS')))
NGN.extend('util', NGN.const(Utility))
NGN.extend('RPC', NGN.const({
  Client: require('./lib/rpc/Client'),
  Server: require('./lib/rpc/Server')
}))
NGN.extend('Task', NGN.const(require('./shared/tasks/task')))
NGN.extend('Tasks', NGN.const(require('./shared/tasks/queue')))

global.__core__ = new NGNCore()

NGN.inherit(NGN, global.__core__)
delete global.NGN

Object.defineProperties(global, {
  NGN: {
    enumerable: true,
    writable: true,
    configurable: false,
    value: global.__core__
  },
  ngn: {
    enumerable: true,
    get: function () {
      return this.NGN
    }
  }
})

delete global.__core__
