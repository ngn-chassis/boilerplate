/**
  * v0.3.31 generated on: Thu May 18 2017 01:24:44 GMT+0000 (UTC)
  * Copyright (c) 2014-2017, Ecor Ventures LLC. All Rights Reserved. See LICENSE (BSD3).
  */
'use strict'

Object.defineProperty(NGN, 'define', {
  enumerable: false,
  writable: false,
  configurable: false,
  value: function (e, w, c, v) {
    return {
      enumerable: e,
      writable: w,
      configurable: c,
      value: v
    }
  }
})

Object.defineProperties(NGN, {
  public: NGN.define(false, false, false, function (value) {
    return NGN.define(true, typeof value !== 'function', false, value)
  }),

  private: NGN.define(false, false, false, function (value) {
    return NGN.define(false, typeof value !== 'function', false, value)
  }),

  const: NGN.define(false, false, false, function (value) {
    return NGN.define(true, false, false, value)
  }),

  privateconst: NGN.define(false, false, false, function (value) {
    return NGN.define(false, false, false, value)
  }),

  get: NGN.define(false, false, false, function (fn) {
    return {
      enumerable: false,
      get: fn
    }
  }),

  set: NGN.define(false, false, false, function (fn) {
    return {
      enumerable: false,
      set: fn
    }
  }),

  getset: NGN.define(false, false, false, (getter, setter) => {
    return {
      enumerable: false,
      get: getter,
      set: setter
    }
  })
})

Object.defineProperties(NGN, {
  extend: NGN.privateconst(function (attribute, descriptor) {
    Object.defineProperty(this, attribute, descriptor)
  }),

  inherit: NGN.const(function (source, dest) {
    if (!source || !dest) {
      return
    }

    source = typeof source === 'function' ? source.prototype : source
    dest = typeof dest === 'function' ? dest.prototype : dest

    Object.getOwnPropertyNames(source).forEach(function (attr) {
      const definition = Object.getOwnPropertyDescriptor(source, attr)
      Object.defineProperty(dest, attr, definition)
    })

    const prototype = Object.getOwnPropertyNames(Object.getPrototypeOf(source)).filter((attr) => {
      return attr.trim().toLowerCase() !== 'constructor' && !dest.hasOwnProperty(attr)
    })

    prototype.forEach((attr) => {
      const cfg = Object.getOwnPropertyDescriptor(source, attr)

      if (cfg === undefined && typeof source[attr] === 'function') {
        Object.defineProperty(dest, attr, NGN.const(function () {
          return source[attr].apply(this, arguments)
        }))
      }
    })
  }),

  slice: NGN.private(function (obj) {
    return Array.prototype.slice.call(obj)
  }),

  splice: NGN.private(function (obj) {
    return Array.prototype.splice.call(obj)
  }),

  coalesce: NGN.public(function () {
    for (let arg = 0; arg < arguments.length; arg++) {
      try {
        if (arguments[arg] !== undefined && arguments[arg] !== null) {
          return arguments[arg]
        }
      } catch (e) {}
    }

    return null
  }),

  nodelike: NGN.get(function () {
    try {
      return process !== undefined
    } catch (e) {
      return false
    }
  }),

  dedupe: NGN.private((array) => {
    return array.filter((element, index) => {
      return array.indexOf(element) === index
    })
  }),

  typeof: NGN.privateconst((el) => {
    let value = Object.prototype.toString.call(el).split(' ')[1].replace(/\]|\[/gi, '').toLowerCase()

    if (value === 'function') {
      if (!el.name) {
        return el.toString().replace(/\n/gi, '').replace(/^function\s|\(.*$/mgi,'').toLowerCase()
      } else {
        value = el.name || 'function'
      }
    }

    return value.toLowerCase();
   }),

  processStackItem: NGN.privateconst(function (item, uri) {
    return item.replace(/at.*\(|\)/gi, '')
      .replace(uri, './')
      .replace(/\/{2,100}/gi, '/')
      .trim().split(':')
  }),

  stack: NGN.get(function () {
    let stack = (new Error).stack.split('\n') || []
    let fnRegex = /at.*\(/gi

    stack = stack.filter((item) => {
      return item.split(':').length > 1
    }).map((item) => {
      let operation = fnRegex.exec(item)

      if (operation) {
        operation = operation[0].replace(/^at\s{1,100}|\s{1,100}\($/gi, '').replace('<anonymous>', 'console')
      }

      if (this.nodelike) {
        item = this.processStackItem(item.toString(), process.cwd())

        return {
          path: item.join(':').replace('./', process.cwd() + '/'),
          file: item[0].substr(0, item[0].length),
          line: parseInt(item[1], 10),
          column: parseInt(item[2], 10),
          operation: operation
        }
      } else {
        item = this.processStackItem(item.toString(), window.location.origin)

        return {
          path: item[0].substr(1, item[0].length - 1) + ':' + item[1] + ':' + item[2],
          file: item[0].substr(1, item[0].length - 1),
          line: parseInt(item[1], 10),
          column: parseInt(item[2], 10),
          operation: operation
        }
      }
    })

    if (stack.length === 0) {
      return [{
        path: 'unknown',
        file: 'unknown',
        line: 0,
        column: 0
      }]
    } else if (this.nodelike) {
      stack.reverse()
    }

    return stack
  }),

  css: NGN.get(() => {
    return NGN.nodelike ? '' : 'font-weight: bold;'
  }),

  isFn: NGN.privateconst((v) => {
    return typeof v === 'function'
  }),

  wrap: NGN.privateconst(function (preFn, fn) {
    return function () {
      preFn(...arguments)
      fn(...arguments)
    }
  }),

  wrapClass: NGN.privateconst(function (preFn, classFn) {
    return function () {
      preFn(...arguments)
      return new classFn(...arguments)
    }
  }),

  deprecate: NGN.privateconst(function (fn, message='The method has been deprecated.') {
    return this.wrap(function () {
      if (NGN.nodelike) {
        console.warn('DEPRECATION NOTICE: ' + message)
      } else {
        console.warn('%cDEPRECATION NOTICE: %c' + message, NGN.css, 'font-weight: normal;')
      }
    }, fn)
  }),

  deprecateClass: NGN.privateconst(function (classFn, message='The class has been deprecated.') {
    return this.wrapClass(function () {
      if (NGN.nodelike) {
        console.warn('DEPRECATION NOTICE: ' + message)
      } else {
        console.warn('%cDEPRECATION NOTICE: %c' + message, NGN.css, 'font-weight: normal;')
      }
    }, classFn)
  }),

  needs: NGN.private(function (namespace, ...attributes) {
    if (typeof namespace !== 'object') {
      throw new Error('NGN.uses() requires an object.')
    }

    let missing = []

    for (let value in attributes) {
      if (!namespace.hasOwnProperty(attributes[value])) {
        missing.push(attributes[value])
      }
    }

    if (missing.length > 0) {
      throw new MissingDependencyError(`Missing ${namespace.constructor.name} dependencies: ${missing.join(', ')}`.replace(/\s{2,100}/gi, ' '))
    }
  }),

  createAlias: NGN.private(function (namespace, name, value) {
    Object.defineProperty(namespace, name, NGN.get(() => {
      return value
    }))
  })
})
