/**
  * v0.3.31 generated on: Thu May 18 2017 01:24:44 GMT+0000 (UTC)
  * Copyright (c) 2014-2017, Ecor Ventures LLC. All Rights Reserved. See LICENSE (BSD3).
  */
'use strict'

let Base = require('../Server')
let rpc = require('ngn-rpc')


class Server extends Base {
  constructor (config) {
    config = config || {}


    super(config)

    let _rep = rpc.axon.socket('rep')
    Object.defineProperties(this, {
      rep: NGN.privateconst(_rep),
      _server: NGN.private(null)
    })

    this.module = config.expose || {}
  }

  get server () {
    return this._server
  }

  expose (module) {
    if (!module) {
      return console.warn('Invalid module specified in expose() method. Skipping.')
    }
    if (!this.running) {
      const me = this
      this.on('start', function () {
        console.info('Exposing module (delayed).')
        me._server.expose(module)
      })
      return console.warn('Cannot expose module until the server is started.')
    }
    this._server.expose(module)
  }

  start () {
    if (!this.running && !this.starting) {
      try {
        const me = this

        this._starting = true

        this.rep.bind(this.port, function () {
          me._server = new rpc.Server(me.rep)

          me._server.sock.once('close', function () {
            me._running = false
            me._starting = false
            me.emit('stop', this)
          })

          me._server.sock.on('connect', function (socket) {
            me.emit('clientconnection')
          })

          me.module && me._server.expose(me.module)

          me._running = true
          me._starting = false
          me.emit && me.emit('start')
        })
      } catch (e) {
        this._running = false
        this._starting = false
        this.emit('error', e)
      }
    } else {
      console.warn('Server already started. Cannot start twice. Make sure autoStart=true and start() are not being executed sequentially.')
    }
  }

  stop () {
    this.server.sock && this.server.sock.close()
  }

}

module.exports = Server
