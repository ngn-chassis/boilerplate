/**
  * v0.3.31 generated on: Thu May 18 2017 01:24:44 GMT+0000 (UTC)
  * Copyright (c) 2014-2017, Ecor Ventures LLC. All Rights Reserved. See LICENSE (BSD3).
  */
'use strict'

const EE = require('events').EventEmitter

class EventEmitter extends EE {

  emit () {
    const event = arguments[0]
    let events = [event]

    if (NGN.typeof(event) === 'regexp' || event.indexOf('*') >= 0) {
      let re = event

      if (NGN.typeof(re) !== 'regexp') {
        re = new RegExp(event.replace('*', '.*', 'gi'))
      }

      events = this.eventNames().filter(function (eventName) {
        return re.test(eventName) && eventName !== event
      })
    }

    let args = Array.from(arguments)
    args.shift()

    let context = this
    for (let index in events) {
      args.unshift(events[index])
      context.event = events[index]
      super.emit.apply(context, args)
      args.shift()
    }
  }

  off (eventName, callback) {
    this.removeListener(eventName, callback)
  }

  onceoff (eventName, callback) {
    this.off(eventName, callback)
  }

  clear () {
    const me = this
    this.eventNames().forEach(function (eventName) {
      me.removeAllListeners(eventName)
    })
  }
}

module.exports = EventEmitter
