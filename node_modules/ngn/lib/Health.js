/**
  * v0.3.31 generated on: Thu May 18 2017 01:24:44 GMT+0000 (UTC)
  * Copyright (c) 2014-2017, Ecor Ventures LLC. All Rights Reserved. See LICENSE (BSD3).
  */
'use strict'

const os = require('os')
const V8 = require('v8')

class HealthMonitor extends NGN.EventEmitter {
  constructor (config) {
    config = config || {}

    super(config)

    const me = this

    Object.defineProperties(this, {
      heartbeatWaitInterval: NGN.private(config.heartbeat || 15 * 1000), 
      heartbeatInterval: NGN.private(null),

      statusWaitInterval: NGN.private(config.status || 5 * 60 * 1000), 
      statusInterval: NGN.private(null),

      infoWaitInterval: NGN.private(config.info || 5 * 60 * 1000), 
      infoInterval: NGN.private(null),
      infoChecksum: NGN.private(null)
    })

    process.on('uncaughtException', function (err) {
      console.error(err.stack)
      me.emit('health.error.uncaught', err)
    })

    process.on('unhandledRejection', function (reason, promise) {
      me.emit('health.error.rejection', {
        reason: reason,
        promise: promise
      })
    })

    process.on('beforeExit', this.sendTerminationNotice)
    process.on('SIGINT', this.sendTerminationNotice('SIGINT'))
  }

  get heartbeatWaitTime () {
    return this.heartbeatWaitInterval
  }

  set heartbeatWaitTime (value) {
    const me = this

    this.heartbeatWaitInterval = value

    this.once('health.heartbeat.stop', function () {
      me.startHeartbeat()
    })

    this.stopHeartbeat()
  }

  get statusWaitTime () {
    return this.statusWaitInterval
  }

  set statusWaitTime (value) {
    const me = this

    this.statusWaitInterval = value

    this.once('health.status.stop', function () {
      me.startStatus()
    })

    this.stopStatus()
  }

  get infoWaitTime () {
    return this.infoWaitInterval
  }

  set infoWaitTime (value) {
    const me = this

    this.infoWaitInterval = value

    this.once('health.info.stop', function () {
      me.startInfo()
    })

    this.stopInfo()
  }

  get heartbeatrunning () {
    return NGN.coalesce(this.heartbeatInterval !== null, false)
  }

  get statusrunning () {
    return NGN.coalesce(this.statusInterval !== null, false)
  }

  get inforunning () {
    return NGN.coalesce(this.infoInterval !== null, false)
  }

  get status () {
    return {
      uptime: os.uptime(),
      load: os.loadavg(),
      ram: {
        total: os.totalmem(),
        free: os.freemem(),
        usage: process.memoryUsage()
      },
      cpu: os.cpus(),
      v8: V8.getHeapStatistics()
    }
  }

  get info () {
    let vars = Object.keys(process.env).filter(function (v) {
      if (['npm_', 'rvm_'].indexOf(v.substr(0, 4)) < 0) {
        if (['TERM', 'TERM_PROGRAM', 'SHELL', 'TMPDIR', '_', 'PWD', 'NPM_PACKAGES', 'NODE', 'NODE_PATH'].indexOf(v) < 0) {
          if (['_system_'].indexOf(v.substr(0, 8))) {
            return true
          }
          return false
        }
        return false
      }
      return false
    })

    return {
      name: process.title || 'Unknown',
      host: os.hostname(),
      os: {
        type: os.type().replace('_NT', ''),
        platform: process.platform,
        arch: os.arch(),
        release: os.release()
      },
      uptime: os.uptime(),
      load: os.loadavg(),
      ram: {
        total: os.totalmem(),
        free: os.freemem(),
        usage: process.memoryUsage()
      },
      cpu: os.cpus(),
      pid: process.pid,
      network: os.networkInterfaces(),
      system: process.versions,
      variables: vars,
      hasnpm: process.config.variables.node_install_npm
    }
  }

  startHeartbeat () {
    const me = this

    if (!this.inforunning) {
      this.startInfo()
    }

    this.heartbeatInterval = setInterval(function () {
      me.sendHeartbeat()
    }, this.heartbeatWaitInterval)
    this.emit('health.heartbeat.start')
  }

  stopHeartbeat () {
    clearInterval(this.heartbeatInterval)
    this.emit('health.heartbeat.stop')
  }

  sendHeartbeat () {
    this.emit('health.heartbeat')
  }

  startStatus () {
    const me = this

    this.statusInterval = setInterval(function () {
      me.sendStatus()
    }, this.statusWaitInterval)

    this.emit('health.status.start')
    this.sendStatus()
  }

  stopStatus () {
    clearInterval(this.statusInterval)
    this.emit('health.status.stop')
  }

  sendStatus () {
    this.emit('health.status', this.status)
  }

  startInfo () {
    const me = this

    this.infoInterval = setInterval(function () {
      let data = me.info
      let id = NGN.util.checksum(JSON.stringify(data))
      if (id !== me.infoChecksum) {
        me.infoChecksum = id
        me.sendInfo()
      }
    }, this.infoWaitInterval)

    this.sendInfo()
    this.emit('health.info.start')
  }

  stopInfo () {
    clearInterval(this.infoInterval)
    this.emit('health.info.stop')
  }

  sendInfo () {
    this.emit('health.info', this.info)
  }

  sendTerminationNotice (data) {
    const me = this
    if (data) {
      return function () {
        me.emit('exit', data)
        process.exit(0)
      }
    } else {
      me.emit('exit')
      process.exit(0)
    }
  }

  off (topic, fn) {
    this.removeListener(topic, fn)
  }

  start () {
    if (!this.heartbeatrunning) {
      this.startHeartbeat() 
    } else if (!this.inforunning) {
      this.startInfo()
    }
    if (!this.statusrunning) {
      this.startStatus()
    }
  }

  stop () {
    if (this.heartbeatrunning) {
      this.stopHeartbeat()
    }
    if (this.statusrunning) {
      this.stopStatus()
    }
    if (this.inforunning) {
      this.stopInfo()
    }
  }
}

module.exports = HealthMonitor
